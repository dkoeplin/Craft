#include "Character.h"

void make_character(float *data, float x, float y, float n, float m, char c) {
    float *d = data;
    float s = 0.0625;
    float a = s;
    float b = s * 2;
    int w = c - 32;
    float du = (w % 16) * a;
    float dv = 1 - (w / 16) * b - b;
    *(d++) = x - n; *(d++) = y - m;
    *(d++) = du + 0; *(d++) = dv;
    *(d++) = x + n; *(d++) = y - m;
    *(d++) = du + a; *(d++) = dv;
    *(d++) = x + n; *(d++) = y + m;
    *(d++) = du + a; *(d++) = dv + b;
    *(d++) = x - n; *(d++) = y - m;
    *(d++) = du + 0; *(d++) = dv;
    *(d++) = x + n; *(d++) = y + m;
    *(d++) = du + a; *(d++) = dv + b;
    *(d++) = x - n; *(d++) = y + m;
    *(d++) = du + 0; *(d++) = dv + b;
}

void make_character_3d(float *data, float x, float y, float z, float n, int face, char c) {
    static const float positions[8][6][3] = {
            {{0, -2, -1}, {0, +2, +1}, {0, +2, -1},
                    {0, -2, -1}, {0, -2, +1}, {0, +2, +1}},
            {{0, -2, -1}, {0, +2, +1}, {0, -2, +1},
                    {0, -2, -1}, {0, +2, -1}, {0, +2, +1}},
            {{-1, -2, 0}, {+1, +2, 0}, {+1, -2, 0},
                    {-1, -2, 0}, {-1, +2, 0}, {+1, +2, 0}},
            {{-1, -2, 0}, {+1, -2, 0}, {+1, +2, 0},
                    {-1, -2, 0}, {+1, +2, 0}, {-1, +2, 0}},
            {{-1, 0, +2}, {+1, 0, +2}, {+1, 0, -2},
                    {-1, 0, +2}, {+1, 0, -2}, {-1, 0, -2}},
            {{-2, 0, +1}, {+2, 0, -1}, {-2, 0, -1},
                    {-2, 0, +1}, {+2, 0, +1}, {+2, 0, -1}},
            {{+1, 0, +2}, {-1, 0, -2}, {-1, 0, +2},
                    {+1, 0, +2}, {+1, 0, -2}, {-1, 0, -2}},
            {{+2, 0, -1}, {-2, 0, +1}, {+2, 0, +1},
                    {+2, 0, -1}, {-2, 0, -1}, {-2, 0, +1}}
    };
    static const float uvs[8][6][2] = {
            {{0, 0}, {1, 1}, {0, 1}, {0, 0}, {1, 0}, {1, 1}},
            {{1, 0}, {0, 1}, {0, 0}, {1, 0}, {1, 1}, {0, 1}},
            {{1, 0}, {0, 1}, {0, 0}, {1, 0}, {1, 1}, {0, 1}},
            {{0, 0}, {1, 0}, {1, 1}, {0, 0}, {1, 1}, {0, 1}},
            {{0, 0}, {1, 0}, {1, 1}, {0, 0}, {1, 1}, {0, 1}},
            {{0, 1}, {1, 0}, {1, 1}, {0, 1}, {0, 0}, {1, 0}},
            {{0, 1}, {1, 0}, {1, 1}, {0, 1}, {0, 0}, {1, 0}},
            {{0, 1}, {1, 0}, {1, 1}, {0, 1}, {0, 0}, {1, 0}}
    };
    static const float offsets[8][3] = {
            {-1, 0, 0}, {+1, 0, 0}, {0, 0, -1}, {0, 0, +1},
            {0, +1, 0}, {0, +1, 0}, {0, +1, 0}, {0, +1, 0},
    };
    float *d = data;
    float s = 0.0625;
    float pu = s / 5;
    float pv = s / 2.5;
    float u1 = pu;
    float v1 = pv;
    float u2 = s - pu;
    float v2 = s * 2 - pv;
    float p = 0.5;
    int w = c - 32;
    float du = (w % 16) * s;
    float dv = 1 - (w / 16 + 1) * s * 2;
    x += p * offsets[face][0];
    y += p * offsets[face][1];
    z += p * offsets[face][2];
    for (int i = 0; i < 6; i++) {
        *(d++) = x + n * positions[face][i][0];
        *(d++) = y + n * positions[face][i][1];
        *(d++) = z + n * positions[face][i][2];
        *(d++) = du + (uvs[face][i][0] ? u2 : u1);
        *(d++) = dv + (uvs[face][i][1] ? v2 : v1);
    }
}
